# Завдання 10.1 Генераторна функція
# Варіан 1
# Реалізуйте генераторну функцію (з використанням оператора yield), яка повертатиме по одному члену числової послідовності,
# закон якої задається за допомогою функції користувача. Крім цього параметром генераторної функції повинні бути значення
# першого члена прогресії та кількість членів, що видаються послідовності (n).
# Генератор повинен зупинити свою роботу з досягнення n-го члена.
# Підказка: це завдання дуже схоже на нескінченний лічильник з матеріалів лекції!
# Потрібно лише обмежити кількість видаваних генератором значень!

# def pow(x):                                                     # задаємо функцію на яку будемо посилатися
#     return x ** 2
#
# def some_gen(begin, end, func):                                 #визначення функції
#     """
#     begin: перший елемент послідовності
#     end: кількість елементів у послідовності
#     func: функція, яка формує значення для послідовності
#     """                                                        # опис begin, end, func для розуміння під час виклику
#     for _ in range(end):
#         yield begin
#         begin = func(begin)
#
# from inspect import isgenerator                                # імпорф ф-ції з модуля
#
# gen = some_gen(2, 4, pow)                           # надаємо значення
# print(next(gen))
# assert isgenerator(gen) == True, 'Test1'                       # Перевірка
# # assert list(gen) == [2, 4, 16, 256], 'Test2'                   # Перевірка
# print('All fine')                                               # результат перевірки

# Варіан 2 по генератору
# def my_hero_health(hero_health):
#     """Функція для зменшення життєвих сил героя. До закінчення життя"""
#     if hero_health <= 0:               # вже нульові, гра закінчена
#         print("Game over!")            # результат при закінченні гри
#         return
#     else:                                                    # в другомуу випадку, якщо  hero_health <= 0
#         print(f"Hero's health: {hero_health}")               # результат при змен. життєвих сил героя при ударі наприклад
#         yield from my_hero_health(hero_health - 10)          # виклик ф-ції при ударі ( окремо прописано умова виклику yield)
#
# gen = my_hero_health(100)                                    # генератор
# for health in gen:                                           # вивід інфо
#     pass

# Завдання 10.2 Перевірити чи є парним чи ні
# Ваша функція is_even повинна повертати True якщо число парне, і False якщо число непарне.
# Вхідні дані: Ціле число.
# Вихідні дані: Логічний тип.
def is_even(digit):
    """ Перевірка чи є парним число """
    return digit % 2 == 0 and digit<=100
    pass
print(is_even(100))
assert is_even(2) == True, 'Test1'
assert is_even(5) == False, 'Test2'
assert is_even(0) == True, 'Test3'
assert is_even(102) == False, 'Test4'
assert is_even(100) == True, 'Test5'
print('All tests passed.')
